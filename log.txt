$DATE「2022年10月3日（Discord にて）」
tkr「そういや C コンパイラやってないな。アセンブリ言語を機械語にするのに binutils のを使うのもどうなんだろと思ってたらそのまま数ヶ月経ってた」
hsjoihs「いいですね。だったら、Rui 本の原則に則って、『step 1 からもう ELF バイナリへとコンパイルしちゃう』『常に実行形式をコンパイラが生成し続けられるようにする』というのでやってみませんか？」
tkr「なるほど」
hsjoihs「C → アセンブラのコンパイラをセルフホストしたあとにアセンブラとリンカと libc と書くのは既に ushitora_anqou がやってるけど、最初から ELF バイナリへとコンパイルしつづける形式で Rui 本を走ってる人を私は知らないので、やってみるとおもしろそう」
hsjoihs「教材書けとは言わんので、作業ログでもいいんで書いてみません？言語はどれでやるんです？」
tkr「もちろん Rust」
hsjoihs「じゃあ、step 1 は『return 3; するやつと return 42; するやつを gcc でコンパイルして ELF バイナリを吐いて、その差分を比較してどのバイトを置き換えるべきかを調べ、それを `include_bytes!()` する』という方針にするのがよさそう」
hsjoihs「なので、step 1 ではアセンブラもリンカもない。まあ、拡張していくと、機械語を直にいじるのがじきにきつくなるので、だんだんアセンブリ言語が育っていって、それは GNU のアセンブリ言語とそれなりに互換性があることが期待されるが、別にそれを目標にするわけではない。」
hsjoihs「という感じでやっていくとよさそう。今日はもう寝ます？」
tkr「いま布団の中です」
hsjoihs「ではでは、おやすみなさい〜」
$DATE「2022年10月3日（一人で作業）」
hsjoihs「じゃあ私が勝手に step 1 を実装するか。なんなら会話ログももうレンダリングできるようにしておこう」
hsjoihs「とりあえず docs フォルダを立てて、docs/dialog.txt に会話を書いて docs/ 内で node index.js したらログがレンダリングできるようにしておいた」
hsjoihs「このリポジトリに招待を飛ばしておいて、」
hsjoihs「Ubuntu の方にリポジトリをクローンし、cargo init し、議事録を書く。おや、npm が通らない。えっと https://stackoverflow.com/questions/67938486/after-installing-npm-on-wsl-ubuntu-20-04-i-get-the-message-usr-bin-env-bash に従ったら直った。」
hsjoihs「ちゃんと README.md も書いておこう。まあ日本語と英語で書いておくか。」
hsjoihs「もう step 1 は私がやってしまおう。experiment フォルダにファイルを用意して、」
hsjoihs「とりあえず Makefile はこんな感じでいいか」
$source
```Makefile
CFLAGS=-std=c17 -Wall -s

3: 3.c
42: 42.c

clean: 
	rm 3
	rm 42

.PHONY: clean
```
hsjoihs「gcc が出力したファイルのサイズを数えると、」

$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c 3
13296 3
```

hsjoihs「うーむ、デカい！」
hsjoihs「まあ、考えてみると、一応 gcc の出力をそのまま使う必要もないんだよな」
hsjoihs「 https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html に頼って、もっと小さい実行形式を出力できるようなお膳立てをしてからじゃないと step 1 にふさわしくない気がする」
hsjoihs「というか、reproducible なビルドになるようにしないといけないんだよな」
hsjoihs「……よし、こうするか。」
$HTML「<ol><li>nasm かなんかで小さな .asm をコンパイルすることで、我々が目指すべき「動く小さい ELF バイナリ」を得る</li><li>それはそれとして、我々が作るのは C コンパイラなので、常に C 言語（のようなもの）を入力として取る</li></ol>」
$DATE「2022年10月3日（yukata_yu との会話）」
ゆかたゆ「-O1 を使わないのですか？ (エイリアスなんでしたっけ)」
ゆかたゆ「あー， -Osがあるんだ…」
hsjoihs「-O1 を導入せず、gcc を消し飛ばして nasm で作るようにします」
ゆかたゆ「なるほ」
hsjoihs「-Os を使うと、3 + 4 - 2 とかが畳み込まれちゃう気がするので」
hsjoihs「まあ一応 -Os でどれくらい減るのかも実験しておくか。そもそも nasm にする予定だけど。CFLAGS=-std=c17 -Wall -s -Os で試すと、」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make 3
cc -std=c17 -Wall -s -Os    3.c   -o 3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make 42
cc -std=c17 -Wall -s -Os    42.c   -o 42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c 3
14328 3
```
hsjoihs「はい、ということで nasm 使います」

$DATE「2022年10月3日（一人で作業）」
hsjoihs「とりあえず、原典にこうあるけど、」
$source
```x86asm
  ; tiny.asm
  BITS 32
  GLOBAL _start
  SECTION .text
  _start:
                mov     eax, 1
                mov     ebx, 42  
                int     0x80
```
hsjoihs「64 ビット環境だし、この BITS 32 を削って実行してみるか。Makefile はこんな感じ」
$source
```Makefile
tiny42: tiny42.asm
	nasm -f elf tiny42.asm
	gcc -Wall -s -nostdlib tiny42.o -o tiny42
```
hsjoihs「make tiny42 をすると～？」
$source
```shell
nasm -f elf tiny42.asm
gcc -Wall -s -nostdlib tiny42.o -o tiny42
/usr/bin/ld: i386 architecture of input file `tiny42.o' is incompatible with i386:x86-64 output
collect2: error: ld returned 1 exit status
make: *** [Makefile:12: tiny42] Error 1
```
hsjoihs「はい。正直そんな気はしてた」
hsjoihs「普通に gcc 付属のアセンブラを使ってみるか」
$source
```x86asm
.globl _start
_start:
	movl	$1, %eax
	movl	$42, %ebx  
	int		$0x80
```
hsjoihs「に対して」
$source
```Makefile
tiny42: tiny42.s
	gcc -Wall -s -nostdlib tiny42.s -o tiny42
```
hsjoihs「をかませてやると、まあちゃんと動く。しかし wc -c tiny42 すると 13024 tiny42 なので、結局問題が解決してないんだよな」

hsjoihs「食事から戻った。やっていき」
hsjoihs「https://cs.lmu.edu/~ray/notes/nasmtutorial/ 曰く、」
$source
```
nasm -felf64 hello.asm && ld hello.o && ./a.out
```
hsjoihs「でよいとのこと。なるほど、やってみるか」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny42
nasm -felf64 tiny42.asm
ld tiny42.o -o tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ echo $?
42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c tiny42
4672 tiny42
```
hsjoihs「まあこんなもんか。これ以上削るのはやりすぎな気もする」
hsjoihs「一応マニュアル https://www.nasm.us/doc/ を見る。あ、--reproducible があるのか、都合がいい、つけておこう」
hsjoihs「おや、動かない。このバージョンの nasm にはないのかな」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ nasm --version
NASM version 2.14.02
```
hsjoihs「マニュアルは version 2.15.05 となっている。この --reproducible、なんと version 2.15.05 で加わった最新の機能だそうだ。すばらしい」
hsjoihs「手元の WSL 2 上の Ubuntu でも sudo apt-get update からの sudo apt-get -y install nasm をすれば nasm が最新になってくれたりしないかな」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ sudo apt-get -y install nasm
Reading package lists... Done
Building dependency tree       
Reading state information... Done
nasm is already the newest version (2.14.02-1).
The following package was automatically installed and is no longer required:
  libfwupdplugin1
Use 'sudo apt autoremove' to remove it.
0 upgraded, 0 newly installed, 0 to remove and 44 not upgraded.
```
hsjoihs「残念。じゃあ自分で入れるしかないか」
hsjoihs「とりあえず https://www.linuxfromscratch.org/blfs/view/svn/general/nasm.html に従って入れて……」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ nasm --version
NASM version 2.15.05 compiled on Oct  3 2022
```
hsjoihs「よし。ではいよいよ」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny42
nasm -felf64  --reproducible tiny42.asm
ld tiny42.o -o tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny3
nasm -felf64  --reproducible tiny3.asm
ld tiny3.o -o tiny3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny42; echo $?
42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny3; echo $?
3
```
hsjoihs「これは、やったか？」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ cmp -l ./tiny42 ./tiny3
4103  52   3
4185  21  20
4209  14  13
4233  30  27
4257  37  36
4286  64  63
4287  62  56
4288  56 141
4289 141 163
4290 163 155
4291 155   0
4292   0 137
4294 137 142
4295 142 163
4297 163 137
4298 137 163
4299 163 164
4300 164 141
4301 141 162
4302 162 164
4303 164   0
4304   0 137
4305 137 145
4306 145 144
4307 144 141
4308 141 164
4309 164 141
4310 141   0
4311   0 137
4312 137 145
4313 145 156
4314 156 144
4315 144   0
4317   0  56
4318  56 163
4319 163 171
4320 171 155
4321 155 164
4322 164 141
4323 141 142
4324 142   0
4325   0  56
4326  56 163
4327 163 164
4328 164 162
4329 162 164
4330 164 141
4331 141 142
4332 142   0
4333   0  56
4334  56 163
4335 163 150
4336 150 163
4337 163 164
4338 164 162
4339 162 164
4340 164 141
4341 141 142
4342 142   0
4343   0  56
4344  56 164
4345 164 145
4346 145 170
4347 170 164
4348 164   0
4577  44  43
4633 334 333
```
hsjoihs「んー。ああそうか、ld 側にも reproducible にしてくれと頼まないと」
hsjoihs「……軽く調べたが、頼み方がよくわからん。リンカを gold にしたらバージョン名を埋め込んできたし。んー、1 バイトのズレはファイル名『tiny3.asm』『tiny42.asm』の差に起因してるっぽいし、そこを strip かなんかで処理すれば解決するかも？」

$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny42
nasm -felf64  --reproducible tiny42.asm
ld tiny42.o -o tiny42
strip tiny42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make tiny3
nasm -felf64  --reproducible tiny3.asm
ld tiny3.o -o tiny3
strip tiny3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ ./tiny42; echo $?; ./tiny3; echo $?
42
3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ cmp -l ./tiny42 ./tiny3
4103  52   3
```
hsjoihs「よし、差分が 1 バイトになった！！！！！」
hsjoihs「ここで 52 って出てるのは cmp コマンドがバイトを 8 進数で出力する仕様になっているからであって、これは 10 進数だと 42 なのでこれで正解です」
hsjoihs「よーし、やっとスタート地点に立つことができた」

$source
```rust
fn main() -> std::io::Result<()> {
    let input = std::env::args().nth(1).expect("入力が与えられていません");
    let input: u8 = input.parse().expect("入力をパースできません");
    let tiny_3 = include_bytes!("../experiment/tiny3");
    let tiny_42 = include_bytes!("../experiment/tiny42");
    assert_eq!(tiny_3.len(), tiny_42.len());

    let file = std::fs::File::create("a.out")?;

    {
        use std::io::Write;
        let mut writer = std::io::BufWriter::new(file);
        for (index, byte) in tiny_3.iter().enumerate() {
            if *byte == tiny_42[index] {
                writer.write_all(&[*byte])?;
            } else if *byte == 3 && tiny_42[index] == 42 {
                writer.write_all(&[input])?;
            } else {
                panic!("`../experiment/tiny3` と `../experiment/tiny42` の間に非自明な差分が見つかったので、なにを出力すべきか分かりません")
            }
        }
    }
    Ok(())
}
```
hsjoihs「これで、step 1 達成！」