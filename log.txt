$DATE「2022年10月3日（Discord にて）」
tkr「そういや C コンパイラやってないな。アセンブリ言語を機械語にするのに binutils のを使うのもどうなんだろと思ってたらそのまま数ヶ月経ってた」
hsjoihs「いいですね。だったら、Rui 本の原則に則って、『step 1 からもう ELF バイナリへとコンパイルしちゃう』『常に実行形式をコンパイラが生成しつつけられるようにする』というのでやってみませんか？」
tkr「なるほど」
hsjoihs「C → アセンブラのコンパイラをセルフホストしたあとにアセンブラとリンカと libc と書くのは既に ushitora_anqou がやってるけど、最初から ELF バイナリへとコンパイルしつづける形式で Rui 本を走ってる人を私は知らないので、やってみるとおもしろそう」
hsjoihs「教材書けとは言わんので、作業ログでもいいんで書いてみません？言語はどれでやるんです？」
tkr「もちろん Rust」
hsjoihs「じゃあ、step 1 は『return 3; するやつと return 42; するやつを gcc でコンパイルして ELF バイナリを吐いて、その差分を比較してどのバイトを置き換えるべきかを調べ、それを `include!()` する』という方針にするのがよさそう」
hsjoihs「なので、step 1 ではアセンブラもリンカもない。まあ、拡張していくと、機械語を直にいじるのがじきにきつくなるので、だんだんアセンブリ言語が育っていって、それは GNU のアセンブリ言語とそれなりに互換性があることが期待されるが、別にそれを目標にするわけではない。」
hsjoihs「という感じでやっていくとよさそう。今日はもう寝ます？」
tkr「いま布団の中です」
hsjoihs「ではでは、おやすみなさい〜」
$DATE「2022年10月3日（一人で作業）」
hsjoihs「じゃあ私が勝手に step 1 を実装するか。なんなら会話ログももうレンダリングできるようにしておこう」
hsjoihs「とりあえず docs フォルダを立てて、docs/dialog.txt に会話を書いて docs/ 内で node index.js したらログがレンダリングできるようにしておいた」
hsjoihs「このリポジトリに招待を飛ばしておいて、」
hsjoihs「Ubuntu の方にリポジトリをクローンし、cargo init し、議事録を書く。おや、npm が通らない。えっと https://stackoverflow.com/questions/67938486/after-installing-npm-on-wsl-ubuntu-20-04-i-get-the-message-usr-bin-env-bash に従ったら直った。」
hsjoihs「ちゃんと README.md も書いておこう。まあ日本語と英語で書いておくか。」
hsjoihs「もう step 1 は私がやってしまおう。experiment フォルダにファイルを用意して、」
hsjoihs「とりあえず Makefile はこんな感じでいいか」
$source
```Makefile
CFLAGS=-std=c17 -Wall -s

3: 3.c
42: 42.c

clean: 
	rm 3
	rm 42

.PHONY: clean
```
hsjoihs「gcc が出力したファイルのサイズを数えると、」

$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c 3
13296 3
```

hsjoihs「うーむ、デカい！」
hsjoihs「まあ、考えてみると、一応 gcc の出力をそのまま使う必要もないんだよな」
hsjoihs「 https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html に頼って、もっと小さい実行形式を出力できるようなお膳立てをしてからじゃないと step 1 にふさわしくない気がする」
hsjoihs「というか、reproducible なビルドになるようにしないといけないんだよな」
hsjoihs「……よし、こうするか。」
$HTML「<ol><li>nasm かなんかで小さな .asm をコンパイルすることで、我々が目指すべき「動く小さい ELF バイナリ」を得る</li><li>それはそれとして、我々が作るのは C コンパイラなので、常に C 言語（のようなもの）を入力として取る</li></ol>」
$DATE「2022年10月3日（yukata_yu との会話）」
ゆかたゆ「-O1 を使わないのですか？ (エイリアスなんでしたっけ)」
ゆかたゆ「あー， -Osがあるんだ…」
hsjoihs「-O1 を導入せず、gcc を消し飛ばして nasm で作るようにします」
ゆかたゆ「なるほ」
hsjoihs「-Os を使うと、3 + 4 - 2 とかが畳み込まれちゃう気がするので」
hsjoihs「まあ一応 -Os でどれくらい減るのかも実験しておくか。そもそも nasm にする予定だけど。CFLAGS=-std=c17 -Wall -s -Os で試すと、」
$source
```shell
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make 3
cc -std=c17 -Wall -s -Os    3.c   -o 3
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ make 42
cc -std=c17 -Wall -s -Os    42.c   -o 42
hsjoihs@LAPTOP-BKHPSENK:~/c_to_elf_compiler/experiment$ wc -c 3
14328 3
```
hsjoihs「はい、ということで nasm 使います」

$DATE「2022年10月3日（一人で作業）」
hsjoihs「とりあえず、原典にこうあるけど、」
$source
```asm
  ; tiny.asm
  BITS 32
  GLOBAL _start
  SECTION .text
  _start:
                mov     eax, 1
                mov     ebx, 42  
                int     0x80
```
hsjoihs「64 ビット環境だし、この BITS 32 を削って実行してみるか。Makefile はこんな感じ」
$source
```Makefile
tiny42: tiny42.asm
	nasm -f elf tiny42.asm
	gcc -Wall -s -nostdlib tiny42.o -o tiny42
```
hsjoihs「make tiny42 をすると～？」
$source
```shell
nasm -f elf tiny42.asm
gcc -Wall -s -nostdlib tiny42.o -o tiny42
/usr/bin/ld: i386 architecture of input file `tiny42.o' is incompatible with i386:x86-64 output
collect2: error: ld returned 1 exit status
make: *** [Makefile:12: tiny42] Error 1
```
hsjoihs「はい。正直そんな気はしてた」